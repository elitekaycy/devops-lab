def remote = [:]
remote.name = 'dickson'
remote.host = '192.168.23.31'
remote.allowAnyHosts = true

def host = '192.168.23.31'

pipeline {
   agent any
   tools {
      jdk 'jdk-20'
      maven '3.9.5'
    }

    environment {
    REGISTRY = 'hub.docker.com'
    REGISTRY_USR = 'elitekaycy'
    REGISTRY_CREDENTIALS = credentials('dockerhub') 
    SERVER_CRED = credentials('servercred')
  }

  stages {
    stage('pull git image') {
      steps {
          script {
             checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/elitekaycy/devops-lab']])
            }
        }
        
    }

    stage('Build Docker Images') {
      steps {
        script {
          sh 'docker build -f DockerFile . -t ${REGISTRY_USR}/chatservice:latest'
        }
      }
    }

    stage('Push Docker Images') {
      steps {
        script {
             withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'pwd', usernameVariable: 'username')]) {
                 sh "echo ${pwd} | docker login -u ${username} --password-stdin"
                 sh "docker push ${REGISTRY_USR}/chatservice:latest"
           }
          }
        }
      }

    stage('transfer files') {
        steps {
            script {
                withCredentials([usernamePassword(credentialsId: 'servercred', passwordVariable: 'pwd', usernameVariable: 'username')]) {
                sh 'echo ${username}@${host}'
                sh 'sshpass -p ${pwd} ssh -o StrictHostKeyChecking=no ${username}@${host} "[[ ! -d ~/chatservice ]] && mkdir ~/chatservice"'
                sh 'sshpass -p ${pwd} scp -r -o StrictHostKeyChecking=no ./compose-prod.yml ./prometheus/prometheus.yml ${username}@${host}:~/chatservice' 
                }
              }
     }
   }


   stage('build and run') {
       steps {
          script {
                remote.password = env.SERVER_CRED_PSW
                remote.user = env.SERVER_CRED_USR
            }

           sshCommand(remote: remote, command: "cd ~/chatservice && docker-compose -f compose-prod.yml up -d")
        }

    }
  }

  post {
    always {
      sh 'docker logout'
      cleanWs()
    }
  }
 }
